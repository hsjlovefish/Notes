#include <iostream>
using namespace std;

// int i = 42;

/*-------------------2.6.1节练习---------------------*/
// 如果忘记写类定义后面的分号会发生什么情况？记录下相关信息，以后可能会有用
//    struct Foo {}    error: expected ‘;’ after struct definition

int main() {
    /*-----------------------------------------------------*/
    // 2.1.2节练习
    // unsigned u = 10, u2 = 42;
    // cout << u2 - u << endl; // 32
    // cout << u - u2 << endl;  // 4,294,967,264

    // int i = 10, i2 = 42;
    // cout << i2 - i << endl; // 32
    // cout << i - i2 << endl; // -32
    // // 如果表达式里既有带符号类型又有无符号类型
    // // 当带符号类型取值为负时会出现异常结果, 因为带符号数会自动转换为无符号数
    // // 带符号类型取值不为负不会?
    // cout << i - u << endl; // 0
    // cout << u - i << endl; // 0


    /*-----------------------------------------------------*/
    // cout << "\62\115\012" << endl;
    // cout << "\62\t\115\012" << endl;


    /*-----------------------------------------------------*/
    //std::cin >> int input_value;
    // int z = {3.14};  // 错误，因为精度会丢失，用花括号初始化会有问题
    //double salery = wage = 9999.99;
    //int x = 3.14; 



    /*-----------------------------------------------------*/
    // int i = 100;
    // int j = i;
    // int sum = 0;
    // for (int i = 0; i != 10; ++i) 
    //     sum += i;
    // std::cout << i << " " << sum << std::endl;


    /*-----------------------------------------------------*/
    // int b = 0;
    // int &a = b;
    // cout << " &a : "<< &a << "\n "
    //      << "a :" <<  a << "\n"
    //      << "&b : " << &b <<  "\t"<< sizeof(a)<< endl;


    /*-----------------------------------------------------*/
    // 2.4.2节练习
    // int i = -1, &r = 0;  // 不合法，定义 整型i为1， int &r必须引用左值
    // const int i2 = i, &r = i;  // 合法，const int &r = i; 对常量的引用可以指向非常量
    // int *const p2 = &i2;   // 不合法， const pointer不能指向常量对象
    // const int i = -1, &r = 0;  // 合法，常量i初始化为-1，对常量的引用初始化为0
    // const int *const p3 = &i2; // 合法，指向常量的常量指针可以指向常量
    // const int *p1 = &i2; // 合法，指向常量的指针可以指向常量 
    // const int &const r2; // 错误 引用不能是const

    // int i, *const cp; // 定义变量i，常量指针cp；不合法，常量指针必须初始化
    // int *p1, *const p2; // 定义指针p1，常量指针p2；不合法，常量指针必须初始化
    // const int ic, &r = ic; // 定义常量ic，对常量的引用r引用常量ic；不合法，常量必须初始化
    // const int *const p3;  // 定义指向常量的指针；不合法，常量指针必须初始化
    // const int *p; // 合法

    /*-----------------------------------------------------*/
    // 2.4.4节练习
    // int null = 0, *p = null;
    // int null = 0, *p = &null;


    /*-----------------------------------------------------*/
    // 2.5.2节练习
    // 2.5.2 auto类型说明符
    // int i = 0, &r = i;
    // auto a = r;   // a是整型

    // const int ci = i, &cr = ci;
    // auto b = ci; // b是整数(ci的顶层const特性被忽略掉了)
    // auto c = cr; // c是一个整数 (cr是c的别名)
    // auto d = &i;  // d是一个整型指针(整数的地址就是指向整数的指针)
    // auto e = &ci;  // e是一个指向整数常量的指针(对常量对象取地址是一种底层const)
    // const auto &f = ci; // f 是 const int

    // auto &g = ci; // g是一个整型常量引用(就是const int &g)，绑定到ci
    // // auto &h = 42; // 错误：不能为非常量引用绑定到字面值
    // const auto &j = 42; // 正确，可以将常量引用绑定字面值

    // auto k = ci, &l = i;     // 对
    // auto &m = ci, *p = &ci;  // 对
    // // auto &n = i, *p2 = &ci;  // 错误，i是int ，ci是const int

    // cout << a << " " << b << " " << c << " " 
    //     << d << " " << e << " " << g << endl;
    // a = 42; // a的值变为42
    // b = 42; // b的值变为42
    // c = 42; // c的值变为42
    // // d = 42; // 错误，d是一个指针，不能用整型常量赋值
    // // e = 42; // 错误，e是一个指向整型常量的指针
    // // g = 42; // 错误，g是一个整型常数的引用， 不能赋值
    // cout << a << " " << b << " " << c << " " 
    //     << d << " " << e << " " << g << endl;

    /*-------------------2.5.3节练习---------------------*/
    // int a = 0;
    // auto b = a; decltype(a) c = a;

    // int temp = 1;
    // int &a = temp;
    // auto b = a; decltype(a) c = a;
    
    // const int z = 1;
    // auto b = z; decltype(z) c = 0;


    return 0;
}